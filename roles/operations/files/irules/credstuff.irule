when RULE_INIT {

    #################################################################################################################################
	# TEST
    #Global variables assigment 
    #debug level, 0 - disabled , 1 - debug , 2 - verbose debug
    set static::debug 2
    #The content of the HTTP response we send back in response to malicious request
    #################################################################################################################################

    #################################################################################################################################
    #variables for fingerprint
    #maxFailedLoginFingerprintValue is the maximum number of failed login attempts from the same fingerprint in the period of time specified in 'failedLoginFingerprintTimeWindow' in seconds
    set static::maxFailedLoginFingerprintValue 2
    set static::failedLoginFingerprintTimeWindow 60
    #period of time in seconds the fingerprint is blocked once it reached the blocking threshold
    set static::blockingFingerprintPeriod 60
    #################################################################################################################################

}

when CLIENT_ACCEPTED {

    #################################################################################################################################
    #initialize fingerprint
    set fingerprint 0
    ## Collect the TCP payload
    TCP::collect
    #################################################################################################################################

}
when CLIENT_DATA {

    #################################################################################################################################
    #Get the data we need to fingerprint the tls session and call the fingerprint function
    if { ! [info exists rlen] } {
        binary scan [TCP::payload] cH4ScH6H4 rtype outer_sslver rlen hs_type rilen inner_sslver

        if { ( ${rtype} == 22 ) and ( ${hs_type} == 1 ) } {
            ## This is a TLS ClientHello message (22 = TLS handshake, 1 = ClientHello)

            ## Call the fingerprintTLS proc
            set fingerprint [call fingerprintTLS [TCP::payload] ${rlen} ${outer_sslver} ${inner_sslver} [IP::client_addr] [IP::local_addr]]

                        ### Do Something here ###
            #log local0. "fingerprint = ${fingerprint}"
                        ### Do Something here ###

        }
    }

    # Collect the rest of the record if necessary
    if { [TCP::payload length] < $rlen } {
        TCP::collect $rlen
    }

    ## Release the paylaod
    TCP::release
    #################################################################################################################################

}

when HTTP_REQUEST {

    #################################################################################################################################
    #Delete a fingerprint from the tables, just for testeing purpose!!, need to build it in a more secure way 
    if {([HTTP::uri] eq "/fingerprintdelete")&&([HTTP::header exists "fingerprintDelete"])} {
    set fingerprintDelete [HTTP::header fingerprintDelete]
    table delete -subtable BLOCKED_FINGERPRINT $fingerprintDelete
    table delete -subtable FAILED_LOGIN_FINGERPRINT $fingerprintDelete
    if {$static::debug > 0} {log local0. "Deleted fingerprint from tables fingerprint: $fingerprint "}
    }
    #################################################################################################################################

    #################################################################################################################################
    #insert the ssl fingerprint to an header so we can use it in ASM. application might also use it.
    #comment out if you don't want to change the HTTP request
    HTTP::header insert sslFingerprint $fingerprint
    if {$static::debug > 1} {log local0. "inserting http header with fingerprint: $fingerprint"}
    #################################################################################################################################

}

when ASM_REQUEST_DONE {

    #################################################################################################################################
    # fingerprint based block
    #checks if the fingerprint is in the blocked list, if it does we will raise an ASM violation to block/respond 
    set isBlockedFingerprint [table lookup -notouch -subtable BLOCKED_FINGERPRINT $fingerprint]
    if {$isBlockedFingerprint > 0} {
    #Fingerprint is in blocking list lets block
    if {$static::debug > 0} {log local0. "Blocked request from fingerprint: $fingerprint time remaining: [table timeout -subtable BLOCKED_FINGERPRINT -remaining $fingerprint]"}
    #HTTP::header insert Block $fingerprint
    ASM::raise "MaliciousFingerprint"
    #setting username to be used in the blocking page
    catch {
    set username [call GetJsonValue [ASM::payload] "username"]
    }
    if {$static::debug > 0} {log local0. "username is $username"}
    }
    #################################################################################################################################
    
    
}

when ASM_RESPONSE_VIOLATION {

    #################################################################################################################################
    #failed login detection based on ASM data guard
    if {$static::debug > 0} {log local0. "asm violation is [ASM::violation names]"}
    #we are checking for response type violations, if we see the dataguard violation we configured  we will consider that a failed attempt 
    if {([ASM::violation names] contains "VIOLATION_RESPONSE_SCRUBBING")&&!([ASM::violation names] contains "MaliciousFingerprint")} {
    #failed login detected
    #################################################################################################################################

    #################################################################################################################################
    # fingerprint based mitigation
    if {$static::debug > 0} {log local0. "failed login from fingerprint: $fingerprint"}
    set failedLoginsPerFingerprint [table lookup -notouch -subtable FAILED_LOGIN_FINGERPRINT $fingerprint]
    #Do we already have a record for that fingerprint?
    if {$failedLoginsPerFingerprint > 0} {
            #We already have a record for that fingerprint we are incrementing the counter
            table incr -notouch -subtable FAILED_LOGIN_FINGERPRINT $fingerprint
            incr failedLoginsPerFingerprint
            if {$static::debug > 0} {log local0. "failedLoginsPerFingerprint is: $failedLoginsPerFingerprint"}
        #Is the number of failed attempts from that fingerprint exceed the maximum allowed? 
        if { $static::maxFailedLoginFingerprintValue <= $failedLoginsPerFingerprint } {
            #Fingerprint exceeded the maximum number of failed attempts, set a blocking flag in our blocking table 
            if {$static::debug > 0} {log local0. "starting to Block fingerprint: $fingerprint"}
            table set -subtable BLOCKED_FINGERPRINT $fingerprint 1 $static::blockingFingerprintPeriod
            }
    }
    else {
    #it's the first time we see that fingerprint failing so we will set a new table record for it
    table set -subtable FAILED_LOGIN_FINGERPRINT $fingerprint 1 $static::failedLoginFingerprintTimeWindow
    if {$static::debug > 0} {log local0. "failedLoginsPerFingerprint is: 1"}
    }
    }
    #################################################################################################################################

}

when ASM_REQUEST_BLOCKING { 
  set x [ASM::violation_data]
  #marker bit to handle header change
  set activeViolation 1
   if {([lindex $x 0] contains "MaliciousFingerprint")} {
      if {$static::debug > 1} {log local0. "MaliciousFingerprint VIOLATIOND detected, let's customized reject page"}
      #set blocked response with the username that was originally sent 
      set response "\{\"code\":401,\"message\":\"Authentication failed.\",\"originalRequestBody\":\"\{\"username\":\"$username\",\"generation\":0,\"lastUpdateMicros\":0\}\",\"referer\":\"10.128.10.111, 10.128.1.1\",\"restOperationId\":1217790,\"kind\":\":resterrorresponse\"\}"
      set decoyResponse "\{\"username\":\"$username\",\"loginReference\":\{\"link\":\"https://localhost/mgmt/cm/system/authn/providers/local/login\"\},\"loginProviderName\":\"local\",\"token\":\{\"token\":\"LKJDS3RXDBGTAFKXSOTMRK5X6H\",\"name\":\"LKJDS3RXDBGTAFKXSOTMRK5X6H\",\"userName\":\"$username\",\"authProviderName\":\"local\",\"user\":\{\"link\":\"https://localhost/mgmt/shared/authz/users/$username\"\},\"groupReferences\":\[\],\"timeout\":1200,\"startTime\":\"2017-10-16T22:06:30.029+0300\",\"address\":\"10.128.1.1\",\"partition\":\"\[All\]\",\"generation\":1,\"lastUpdateMicros\":1508180790028607,\"expirationMicros\":1508181990029000,\"kind\":\"shared:authz:tokens:authtokenitemstate\",\"selfLink\":\"https://localhost/mgmt/shared/authz/tokens/LKJDS3RXDBGTAFKXSOTMRK5X6H\"\},\"generation\":0,\"lastUpdateMicros\":0\}"
      #use random function to send a decoy response for some of the requests
      if {[expr int(rand()*10)] eq 5} {
      ASM::payload replace 0 0 $decoyResponse
      }
      else {
      ASM::payload replace 0 0 $response
      }
      }   
  
}


when HTTP_RESPONSE_RELEASE {

   catch {
       #make sure  ssl fingerprint header isn't sent back 
       HTTP::header remove sslFingerprint
   }
   
   #catch for error if variable does not exist (no previous event ASM_REQUEST_BLOCKING)
   catch {
       #do only if  previous was event ASM_REQUEST_BLOCKING
       if { $activeViolation } {
           #modify respose header
           #HTTP::header remove Content-Length
           HTTP::header insert server com.f5.rest.common.RestRequestSender
       }
   }
}


## TLS Fingerprint Procedure #################
## 
## Author: Kevin Stewart, 12/2016
## Modifications: Yossi rosenboim 7/2017
## Purpose: Return ssl fingerprint 
## Input: 
##      Full TCP payload collected in CLIENT_DATA event of a TLS handshake ClientHello message
##      Record length (rlen)
##      TLS outer version (outer)
##      TLS inner version (inner)
##      Client IP
##      Server IP
##############################################

proc fingerprintTLS { payload rlen outer inner clientip serverip } {

    ## The first 43 bytes of a ClientHello message are the record type, TLS versions, some length values and the
    ## handshake type. We should already know this stuff from the calling iRule. We're also going to be walking the
    ## packet, so the field_offset variable will be used to track where we are.
    set field_offset 43

    ## The first value in the payload after the offset is the session ID, which may be empty. Grab the session ID length
    ## value and move the field_offset variable that many bytes forward to skip it.
    binary scan ${payload} @${field_offset}c sessID_len
    set field_offset [expr {${field_offset} + 1 + ${sessID_len}}]

    ## The next value in the payload is the ciphersuite list length (how big the ciphersuite list is. We need the binary
    ## and hex values of this data.
    binary scan ${payload} @${field_offset}S cipherList_len
    binary scan ${payload} @${field_offset}H4 cipherList_len_hex
    set cipherList_len_hex_text ${cipherList_len_hex}

    ## Now that we have the ciphersuite list length, let's offset the field_offset variable to skip over the length (2) bytes
    ## and go get the ciphersuite list. Multiple by 2 to get the number of appropriate hex characters.
    set field_offset [expr {${field_offset} + 2}]
    set cipherList_len_hex [expr {${cipherList_len} * 2}]
    binary scan ${payload} @${field_offset}H${cipherList_len_hex} cipherlist

    ## Next is the compression method length and compression method. First move field_offset to skip past the ciphersuite
    ## list, then grab the compression method length. Then move field_offset past the length (2) bytes and grab the 
    ## compression method value. Finally, move field_offset past the compression method bytes.
    set field_offset [expr {${field_offset} + ${cipherList_len}}]
    binary scan ${payload} @${field_offset}c compression_len
    #set field_offset [expr {${field_offset} + ${compression_len}}]
    set field_offset [expr {${field_offset} + 1}]
    binary scan ${payload} @${field_offset}H[expr {${compression_len} * 2}] compression_type
    set field_offset [expr {${field_offset} + ${compression_len}}]

    ## We should be in the extensions section now, so we're going to just run through the remaining data and
    ## pick out the extensions as we go. But first let's make sure there's more record data left, based on 
    ## the current field_offset vs. rlen.
    if { [expr {${field_offset} < ${rlen}}] } {
        ## There's extension data, so let's go get it. Skip the first 2 bytes that are the extensions length
        set field_offset [expr {${field_offset} + 2}]

        ## Make a variable to store the extension types we find
        set extensions_list ""

        ## Pad rlen by 1 byte
        set rlen [expr {$rlen + 1}]

        while { [expr {${field_offset} <= ${rlen}}] } {
            ## Grab the first 2 bytes to determine the extension type
            binary scan ${payload} @${field_offset}H4 ext

            ## Store the extension in the extensions_list variable
            append extensions_list ${ext}

            ## Increment field_offset past the 2 bytes of the extension type
            set field_offset [expr {${field_offset} + 2}]

            ## Grab the 2 bytes of extension lenth
            binary scan ${payload} @${field_offset}S ext_len

            ## Increment field_offset past the 2 bytes of the extension length
            set field_offset [expr {${field_offset} + 2}]

            ## Look for specific extension types in case these need to increment the field_offset (and because we need their values)
            switch $ext {
                "000b" {
                    ## ec_point_format - there's another 1 byte after length
                    ## Grab the extension data
                    binary scan ${payload} @[expr {${field_offset} + 1}]H[expr {(${ext_len} - 1) * 2}] ext_data
                    set ec_point_format ${ext_data}
                }
                "000a" {
                    ## elliptic_curves - there's another 2 bytes after length
                    ## Grab the extension data
                    binary scan ${payload} @[expr {${field_offset} + 2}]H[expr {(${ext_len} - 2) * 2}] ext_data
                    set elliptic_curves ${ext_data}
                }
                "000d" {
                    ## sig_alg - there's another 2 bytes after length
                    ## Grab the extension data
                    binary scan ${payload} @[expr {${field_offset} + 2}]H[expr {(${ext_len} - 2) * 2}] ext_data
                    set sig_alg ${ext_data}
                }
                default {
                    ## Grab the otherwise unknown extension data
                    binary scan ${payload} @${field_offset}H[expr {${ext_len} * 2}] ext_data
                }
            }

            ## Increment the field_offset past the extension data length. Repeat this loop until we reach rlen (the end of the payload)
            set field_offset [expr {${field_offset} + ${ext_len}}]
        }
    }

    ## Now let's compile all of that data.
    set cipl [string toupper ${cipherList_len_hex_text}]
    set ciph [string toupper ${cipherlist}]
    # fix for postman added cipher
    set ciph [substr $ciph 4]
    set coml ${compression_len}
    set comp [string toupper ${compression_type}]
    if { ( [info exists extensions_list] ) and ( ${extensions_list} ne "" ) } { set exte [string toupper ${extensions_list}] } else { set exte "@@@@" }
    if { ( [info exists elliptic_curves] ) and ( ${elliptic_curves} ne "" ) } { set ecur [string toupper ${elliptic_curves}] } else { set ecur "@@@@" }
    if { ( [info exists sig_alg] ) and ( ${sig_alg} ne "" ) } { set siga [string toupper ${sig_alg}] } else { set siga "@@@@" }
    if { ( [info exists ec_point_format] ) and ( ${ec_point_format} ne "" ) } { set ecfp [string toupper ${ec_point_format}] } else { set ecfp "@@@@" }

    ## Initialize the match variable
    set match ""

    ## Now let's build the fingerprint string and search the database
    #need to take into account only some extentions, until then we don't use that.
    #set fingerprint_str "${outer}+${inner}+${cipl}+${ciph}+${coml}+${comp}+${exte}+${ecur}+${siga}+${ecfp}"
    set fingerprint_str "${outer}+${inner}+${cipl}+${ciph}+${coml}+${comp}"
    ## Return fingerprint
    return $fingerprint_str
}



proc GetJsonValue {payload property}
{
	set json_start [string first "{" $payload]
	set json_end [string last "}" $payload]
	set json [string range $payload $json_start $json_end]

	# Find the beginning of the specified property in json              
	set pointer [string first $property $payload]
	if {$pointer == -1} {
		#log local0. "Property not found in json"
		return ""
	}

	# Slice off all the beginning of the string to make it start with the specified property
	set json [string range $json $pointer $json_end]

	# Find the semicolon separating the name of the parameter from its value
	# and slice off all the characters from the beginning up to this point. 
	# Now the string will begin from the first char of our parameter's value.
	set pointer [string first ":" $json]
	set json [string range $json [expr {$pointer+1}] $json_end]

	# get the first character of the parameter's value
	set next_char [string range $json 0 0]

	if {$next_char eq "\""} {  # The value begins with quotes, it's a string
	  
	  # Slice off the first quote
	  set json [string range $json 1 $json_end]

	  # Find the position of the last quote
	  set pointer [string first "\"" $json]
	  
	  # Take the string between the quotes
	  set result [string range $json 0 [expr {$pointer-1}]]

	} else { # Not a string value

	  # Try to find the closest comma separating the value from the next json parameter
	  set pointer [string first "," $json]
	  if {$pointer < 0} { # Oops, may be we are at the end of the json string? 
		 set pointer [string first "\}" $json]
	  }
	  
	  #Take the value from current position to the comma/bracket
	  set result [string range $json 0 [expr {$pointer-1}]]
	}

	return $result
}
